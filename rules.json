{
    "project": "LinguaAI - Voice-Based Language Tutor App",
    "layout": {
      "goal": "Keep global layout clean, voice-first, and brand-consistent.",
      "rules": [
        "Use MUI ThemeProvider and CssBaseline at the root layout level.",
        "Wrap pages in <main> with minHeight 100vh using Box or Container.",
        "Center authentication flows vertically and horizontally.",
        "Background color for auth pages should be warm and welcoming (e.g., soft beige).",
        "Avoid adding global navbars/footers unless explicitly instructed."
      ]
    },
    "components": {
      "goal": "Promote modularity and DRY principles in UI components.",
      "rules": [
        "Extract repeated UI patterns (e.g., auth headers, social login buttons) into reusable components inside /components directory.",
        "Accept props like 'action' or 'text' to make components flexible without duplication.",
        "Use descriptive component names (e.g., AuthHeading, SocialLogin).",
        "Keep components small and focused (single responsibility principle)."
      ]
    },
    "styling": {
      "goal": "Maintain visual consistency and easy theming.",
      "rules": [
        "Move hardcoded brand colors into the MUI theme palette.",
        "Use theme.palette.primary.main for LinguaAI brand color instead of hex codes.",
        "Prefer using sx prop for MUI styling unless complexity requires styled-components.",
        "Font styling: Use 'Manrope' or 'Inter' for body text, 'Outfit' for brand elements."
      ]
    },
    "forms": {
      "goal": "Ensure accessibility, validation, and clean form logic.",
      "rules": [
        "Use controlled components for forms (e.g., TextField with value/onChange).",
        "Set input type where appropriate (e.g., type='email' for email fields).",
        "Validate form input client-side before submit. Extract validation logic into utilities or hooks if reused.",
        "Do not duplicate form error handling â€” prefer centralized logic."
      ]
    },
    "api": {
      "goal": "Protect clean server/client boundaries and API interactions.",
      "rules": [
        "Separate API interaction logic from form UI. Place in /lib/api or similar.",
        "Use async/await for API calls.",
        "Handle errors gracefully and surface basic feedback to users (e.g., snackbars, inline errors)."
      ]
    }
  }